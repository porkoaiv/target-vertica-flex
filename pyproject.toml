[tool.poetry]
name = "target-vertica-flex"
version = "0.0.0"
description = "`target-vertica-flex` is a Singer target for Vertica, built with the Meltano SDK for Singer Targets."
authors = ["Aivo Porkon <aivo.porkon@gmail.com>"]
maintainers = ["Aivo Porkon <aivo.porkon@gmail.com>"]
license = "MIT"
readme = "README.md"
#homepage = "https://.."
#repository = "https://github.com/.."
keywords = [
    "Vertica",
    "Singer",
    "ELT",
    "Meltano",
    "Meltano SDK",
]
classifiers = [
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
]
packages = [
    { include = "target_vertica_flex" }
]

[tool.poetry.dependencies]
python = ">=3.8"
#sqlalchemy = "~=2.0"
sqlalchemy = "<2.0"
sqlalchemy-vertica = ">=0.0.5"
vertica-python = ">=1.3.8"
#sqlalchemy-vertica-python = ">=0.6.3"
#psycopg2-binary = ">=2.9.9"
sshtunnel = ">=0.4.0"

[tool.poetry.dependencies.singer-sdk]
version = ">=0.36.0"

[tool.poetry.group.dev.dependencies]
pytest = ">=7.4.2"
mypy = ">=1.6.1"
remote-pdb = ">=2.1.0"
ruff = ">=0.1.14"
tox = ">=4"
types-paramiko = ">=3.3.0.0"
types-simplejson = ">=3.19.0.2"
types-sqlalchemy = ">=1.4.53.38"
types-jsonschema = ">=4.19.0.3"

[tool.mypy]
exclude = "tests"

[[tool.mypy.overrides]]
module = ["sshtunnel"]
ignore_missing_imports = true

[build-system]
requires = ["poetry-core==1.9.0", "poetry-dynamic-versioning==1.3.0"]
build-backend = "poetry_dynamic_versioning.backend"

[tool.poetry.scripts]
# CLI declaration
target-vertica-flex = 'target_vertica_flex.target:TargetVerticaFlex.cli'

[tool.pytest.ini_options]
pythonpath = [
  "."
]

[tool.poetry-dynamic-versioning]
#enable = true
#vcs = "git"
style = "semver"

[tool.ruff]
target-version = "py38"

[tool.ruff.lint]
select = [
  "F",   # Pyflakes
  "W",   # pycodestyle warnings
  "E",   # pycodestyle errors
  "I",   # isort
  "N",   # pep8-naming
  "D",   # pydocsyle
  "ICN", # flake8-import-conventions
  "RUF", # ruff
]

[tool.ruff.lint.flake8-import-conventions]
banned-from = ["sqlalchemy"]

[tool.ruff.lint.flake8-import-conventions.extend-aliases]
sqlalchemy = "sa"

[tool.ruff.lint.pydocstyle]
convention = "google"
